const savingsCalculator = Vue.createApp({
    data: () => ({ chartData: [], chartLabels: [], myChart: null, formData: { SavingType: "", GoalAmount: "", GoalInterest: "", GoalFrequency: "", GoalYears: "", SavedAmount: "", SavedInterest: "", PagePropertiesNodeGuid: "" }, inputFilled: !1, selectYearFilled: !1, selectFreqFilled: !1 }), computed: { isScreenSizeValid: () => window.innerWidth <= 1023 }, methods: {
        pageLoadDummyData() { let e = { Breakdown: [{ Year: 1, AccumulatedSavings: 1e4, AccumulatedInterest: 500 }, { Year: 2, AccumulatedSavings: 15e3, AccumulatedInterest: 750 }, { Year: 3, AccumulatedSavings: 2e4, AccumulatedInterest: 1e3 }, { Year: 4, AccumulatedSavings: 25e3, AccumulatedInterest: 1250 }, { Year: 5, AccumulatedSavings: 3e4, AccumulatedInterest: 1500 }, { Year: 6, AccumulatedSavings: 35e3, AccumulatedInterest: 1750 }, { Year: 7, AccumulatedSavings: 4e4, AccumulatedInterest: 2e3 }, { Year: 8, AccumulatedSavings: 45e3, AccumulatedInterest: 2250 }, { Year: 9, AccumulatedSavings: 5e4, AccumulatedInterest: 2500 }, { Year: 10, AccumulatedSavings: 55e3, AccumulatedInterest: 2750 },] }; this.chartYear = e.Breakdown.map(e => e.Year), this.chartSaving = e.Breakdown.map(e => e.AccumulatedSavings), this.chartInterest = e.Breakdown.map(e => e.AccumulatedInterest), this.renderChart() }, async sendData() { try { document.querySelector(".sc-backend-validation").innerText = "", this.calculatedResultData = null, this.formData.PagePropertiesNodeGuid = document.querySelector('input[id="PagePropertiesNodeGuid"]').value, this.requestData = this.formData; var e = this.formData.SavingType; this.requestData.GoalAmount = parseFloat(this.formData.GoalAmount.replace(/[^\d\.\-]/g, "")), this.requestData.SavedAmount = parseFloat(this.formData.SavedAmount.replace(/[^\d\.\-]/g, "")), this.requestData.GoalInterest = parseFloat(this.formData.GoalInterest), this.requestData.SavedInterest = parseFloat(this.formData.SavedInterest), "reach_goal" === e ? this.requestData.SavingType = "0" : "how_much_can_save" === e && (this.requestData.SavingType = "1"), await axios.post("/SavingsCalculatorWidget/GetCalculatedResult", { __RequestVerificationToken: document.querySelector('input[name="__RequestVerificationToken"]').value, RequestPayload: this.requestData }, { headers: { "Content-Type": "multipart/form-data" } }).then(e => { e.data.response.IsValid ? (this.calculatedResultData = e.data.response.CalculationResult, this.setCalculatedData()) : document.querySelector(".sc-backend-validation").innerText = e.data.response.ValidationMessage }).catch(e => { document.querySelector(".sc-backend-validation").innerText = "Something went wrong. Please contact technical support.", console.log(e) }) } catch (t) { console.error("Error sending data:", t) } }, fetchPageLoadData() { var e = get_savings_calculator_data; this.errorMessageRequired = e.SavingsCalculatorValidationMessage.RequiredFieldValidationMessage, this.errorMessageNumber = e.SavingsCalculatorValidationMessage.NumberValidationMessage, this.errorMessageMinInterestRate = e.SavingsCalculatorValidationMessage.MinInterestRateValidationMessage, this.goalAmountValidationMessage = e.SavingsCalculatorValidationMessage.GoalAmountValidationMessage, this.inflation = e.Inflation, this.recalculateText = e.ReCalculateButtonTest, this.defaultInterestRate = e.DefaultInterest, this.currentSavingsDefault = e.CurrentSavingsAmountDefault, this.savingsAmountDefault1 = e.SavingsAmountDefault1, this.savingsAmountDefault2 = e.SavingsAmountDefault2, this.$el.querySelectorAll(".savings-cal-interest-input").length > 0 && this.$el.querySelectorAll(".savings-cal-interest-input").forEach(e => { e.value = this.defaultInterestRate }), this.$el.querySelectorAll(".savings-cal-saved-input").length > 0 && this.$el.querySelectorAll(".savings-cal-saved-input").forEach(e => { e.value = this.currentSavingsDefault }), document.querySelector(".sc-backend-validation").innerText = "" }, fetchResultData() { let e = axios.create({ baseURL: "https://mocki.io/v1/b6cfa37f-a788-4c7d-a554-4f3d3847b5ad", timeout: 5e3 }); e.get().then(e => { this.calculatedResultData = e.data, this.setCalculatedData(e.data) }).catch(e => { console.error("Error fetching data:", e) }) }, setCalculatedData() { if (null != this.calculatedResultData) { let e = this.calculatedResultData, t = e.Breakdown; this.chartDataLength = e.Breakdown.length, this.chartYear = e.Breakdown.map(e => e.Year), this.chartSaving = e.Breakdown.map(e => e.AccumulatedSavings), this.chartInterest = e.Breakdown.map(e => e.AccumulatedInterest), this.savingType = e.SavingType, this.totalSaving = e.TotalSavings, this.savingAmount = e.FrequencySavingAmount, this.savingFrequency = e.FrequencySavingText, this.savingYears = e.SavingYears, this.resultStatement = e.ResultStatement, this.frequencyId = e.FrequencyId, this.renderResultSummary(), this.renderChart(), this.renderTable(t) } }, renderChart() { let e = this.$el.querySelector("#savings-chart"), t = { labels: this.chartYear, datasets: [{ label: "Savings", data: this.chartSaving, backgroundColor: "#0087E2", borderColor: "#0087E2", borderWidth: 1 }, { label: "Interest", data: this.chartInterest, backgroundColor: "#87CAFF", borderColor: "#87CAFF", borderWidth: 0 }] }, a = { responsive: !0, maintainAspectRatio: !0, defaultFontFamily: "Mulish-Regular", defaultFontSize: window.innerWidth < 1023 ? 14 : 13, defaultFontLineHeight: "20px", scales: { x: { grid: { display: !1 }, stacked: !0, title: { display: !0, text: "Years" }, ticks: { maxTicksLimit: 30, autoSkip: !1, maxRotation: 0, minRotation: 0, callback: function (e, a, r) { return a % 2 == 1 && a >= 1 ? t.labels[a] : "" }, font: { family: "Mulish-Regular", color: "#202834", size: window.innerWidth < 1023 ? 10 : 13, lineHeight: "20px" } } }, y: { grid: { color: e => e.index % 2 == 0 ? "rgba(0, 0, 0, 0.1)" : "rgba(0, 0, 0, 0)" }, stacked: !0, title: { display: !0, text: "Amount ($)" }, ticks: { callback: function (e, t, a) { var r = ""; return e >= 1e6 ? t % 2 == 0 ? e / 1e6 + "m" : "" : e >= 1e3 ? t % 2 == 0 ? e / 1e3 + "k" : "" : t % 2 == 0 ? e : "" }, font: { family: "Mulish-Regular", color: "#202834", size: window.innerWidth < 1023 ? 10 : 13, lineHeight: "20px" } } } }, plugins: { legend: { display: !0, labels: { usePointStyle: !0, padding: window.innerWidth < 1023 ? 15 : 50, font: { family: "Mulish-Regular", size: window.innerWidth < 1023 ? 10 : 13, lineHeight: "20px" }, generateLabels: function (e) { return e.data.datasets.map(function (e) { return { text: `    Accumulated ${e.label}`, fillStyle: e.backgroundColor, strokeStyle: e.backgroundColor, hidden: !1 } }) } } }, tooltip: { mode: "index", intersect: !0, enabled: !1, position: "nearest", external: this.externalTooltipHandler, callbacks: { label: function (e) { let t; return `<span>${e.dataset.label || ""}: </span><span style="color:orange">${e.dataset.data[e.dataIndex].toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 })}</span>` }, footer: function (e) { let t = 0; return e.forEach(e => { t += e.parsed.y }), `Total: <span style="color:orange">${t.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 })}</span>` } }, titleFont: { family: "Mulish-Regular", size: window.innerWidth < 1023 ? 14 : 13, lineHeight: "20px" }, bodyFont: { family: "Mulish-Regular", size: window.innerWidth < 1023 ? 14 : 13, lineHeight: "20px" } } } }; this.myChart && this.myChart.destroy(), this.myChart = new Chart(e, { type: "bar", data: t, options: a }) }, calculateData(e) { this.submitFormValidate(e) }, getOrCreateTooltip(e) { let t = e.canvas.parentNode.querySelector("div"); if (!t) { (t = document.createElement("div")).style.background = "linear-gradient(163deg, #F4F4F4 -18.37%, #FFF 114.75%)", t.style.borderRadius = "15px", t.style.color = "#000", t.style.opacity = 1, t.style.pointerEvents = "none", t.style.position = "absolute", t.style.transform = "translate(-50%, 0)", t.style.transition = "all .1s ease", t.style.fontSize = "13px", t.style.lineHeight = "20px", t.style.fontFamily = "Mulish-Regular", t.style.borderColor = "#C1C9D6", t.style.borderWidth = "1px"; let a = document.createElement("table"); a.style.margin = "0px", t.appendChild(a), e.canvas.parentNode.appendChild(t) } return t }, externalTooltipHandler(e) { let { chart: t, tooltip: a } = e, r = this.getOrCreateTooltip(t); if (0 === a.opacity) { r.style.opacity = 0; return } if (a.body) { let s = a.title || [], l = a.body.map(e => e.lines), i = a.footer || [], n = document.createElement("thead"); s.forEach(e => { let t = document.createElement("tr"); t.style.borderWidth = 0; let a = document.createElement("th"); a.style.borderWidth = 0, a.style.textAlign = "left"; let r = document.createTextNode("Year " + e); a.appendChild(r), t.appendChild(a), n.appendChild(t) }); let o = document.createElement("tbody"); l.forEach((e, t) => { a.labelColors[t]; let r = document.createElement("span"); r.innerHTML = e; let s = document.createElement("tr"); s.style.backgroundColor = "inherit", s.style.borderWidth = 0; let l = document.createElement("td"); l.style.borderWidth = 0, l.appendChild(r), s.appendChild(l), o.appendChild(s) }), i.forEach(e => { let t = document.createElement("tr"); t.style.borderWidth = 0; let a = document.createElement("td"); a.style.borderWidth = 0; let r = document.createElement("span"); r.innerHTML = e, a.appendChild(r), t.appendChild(a), o.appendChild(t) }); let c = r.querySelector("table"); for (; c.firstChild;)c.firstChild.remove(); c.appendChild(n), c.appendChild(o) } let { offsetLeft: _, offsetTop: u } = t.canvas; r.style.opacity = 1, r.style.left = _ + a.caretX + "px", r.style.top = u + a.caretY - 105 + "px", r.style.font = a.options.bodyFont.string, r.style.width = "150px", r.style.padding = a.options.padding + "px " + a.options.padding + "px", r.style.borderStyle = "solid", r.style.borderWidth = "1px", r.style.borderColor = "#C1C9D6", this.$el.querySelectorAll(".tooltip-triangle").length > 0 && this.$el.querySelectorAll(".tooltip-triangle")[0].remove(); let d = document.createElement("div"); d.classList.add("tooltip-triangle"), r.appendChild(d) }, renderResultSummary() { let e = this.$el.querySelectorAll(".savings-cal-summary"); e.forEach(e => { e.innerHTML = "", e.innerHTML = this.resultStatement }) }, renderTable(e) { let t = document.createElement("table"), a = document.createElement("thead"), r = document.createElement("tbody"); if ("how_much_can_save" === this.savingType || 0 !== this.frequencyId) { let s = document.createElement("tr");["Year", "Interest", "Annual Savings", "Accumulated Savings", "Accumulated Interest", "Interest Gained", "Total Savings"].forEach(e => { let t = document.createElement("th"); t.textContent = e, s.appendChild(t) }), a.appendChild(s); for (let l = 0; l < this.chartDataLength; l++) { let i = document.createElement("tr"); i.appendChild(document.createElement("td")).textContent = e[l].Year, i.appendChild(document.createElement("td")).textContent = e[l].Interest, i.appendChild(Object.assign(document.createElement("td"), { className: "dimmed", textContent: e[l].AnnualSavings.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }) })), i.appendChild(document.createElement("td")).textContent = e[l].AccumulatedSavings.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }), i.appendChild(document.createElement("td")).textContent = e[l].AccumulatedInterest.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }), i.appendChild(document.createElement("td")).textContent = e[l].InterestGained.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }), i.appendChild(document.createElement("td")).textContent = e[l].TotalAccumulation.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }), r.appendChild(i) } } else { let n = document.createElement("tr");["Year", "Interest", "Initial Savings", "Accumulated Savings", "Accumulated Interest", "Interest Gained", "Total Savings"].forEach(e => { let t = document.createElement("th"); t.textContent = e, n.appendChild(t) }), a.appendChild(n); for (let o = 0; o < this.chartDataLength; o++) { let c = document.createElement("tr"); c.appendChild(document.createElement("td")).textContent = e[o].Year, c.appendChild(document.createElement("td")).textContent = e[o].Interest, c.appendChild(Object.assign(document.createElement("td"), { className: "dimmed", textContent: e[o].InitialSavings.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }) })), c.appendChild(document.createElement("td")).textContent = e[o].AccumulatedSavings.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }), c.appendChild(document.createElement("td")).textContent = e[o].AccumulatedInterest.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }), c.appendChild(document.createElement("td")).textContent = e[o].InterestGained.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }), c.appendChild(document.createElement("td")).textContent = e[o].TotalAccumulation.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }), r.appendChild(c) } } t.appendChild(a), t.appendChild(r); let _ = this.$el.querySelector(".savings-cal-table"); _.innerHTML = "", _.appendChild(t); let u = !1, d, v, g, m; _.addEventListener("mousedown", e => { u = !0, d = e.clientX, v = e.clientY, g = _.scrollLeft, m = _.scrollTop }), _.addEventListener("mousemove", e => { if (!u) return; let t = e.clientX - d, a = e.clientY - v; _.scrollLeft = g - t, _.scrollTop = m - a }), window.addEventListener("mouseup", () => { u = !1 }); let h = document.querySelectorAll(".dimmed"); if (h.length > 0) { h[0].style.opacity = "1"; for (let p = 1; p < h.length; p++)h[p].style.opacity = "0.5" } }, renderTooltips() {
            let e = this.$el.querySelectorAll(".savings-cal-tooltip"); e.forEach(e => {
                e.innerHTML = "", e.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22" fill="none">
        <path d="M10.9833 0.0166016C4.91783 0.0166016 0 4.9362 0 10.9999C0 17.0672 4.91783 21.9832 10.9833 21.9832C17.0488 21.9832 21.9666 17.0672 21.9666 10.9999C21.9666 4.9362 17.0488 0.0166016 10.9833 0.0166016ZM10.9833 4.88824C12.0106 4.88824 12.8434 5.72102 12.8434 6.74831C12.8434 7.77561 12.0106 8.60839 10.9833 8.60839C9.95603 8.60839 9.12324 7.77561 9.12324 6.74831C9.12324 5.72102 9.95603 4.88824 10.9833 4.88824ZM13.4634 16.1373C13.4634 16.4308 13.2255 16.6687 12.932 16.6687H9.03467C8.74117 16.6687 8.50322 16.4308 8.50322 16.1373V15.0744C8.50322 14.7809 8.74117 14.5429 9.03467 14.5429H9.56612V11.7085H9.03467C8.74117 11.7085 8.50322 11.4706 8.50322 11.1771V10.1142C8.50322 9.82068 8.74117 9.58272 9.03467 9.58272H11.8691C12.1626 9.58272 12.4005 9.82068 12.4005 10.1142V14.5429H12.932C13.2255 14.5429 13.4634 14.7809 13.4634 15.0744V16.1373Z" fill="#C1C9D6"/>
        </svg>`, e.addEventListener("mouseover", e => { let t = e.currentTarget.closest(".savings-cal-form").querySelector(".savings-cal-tooltiptext-ext"); t.style.visibility = "visible", t.style.height = "auto", t.style.opacity = "1" }), e.addEventListener("mouseout", e => { let t = e.currentTarget.closest(".savings-cal-form").querySelector(".savings-cal-tooltiptext-ext"); t.style.visibility = "hidden", t.style.height = "0", t.style.opacity = "0" })
            })
        }, toggleAccordion(e) { e.classList.toggle("active-accordion"); var t = e.nextElementSibling; t.classList.toggle("active-accordion"), t.classList.contains("active-accordion") ? t.style.maxHeight = t.scrollHeight + "px" : t.style.maxHeight = 0 }, formatCurrency(e) { if (e = parseFloat(e), isNaN(e)) return "Invalid input"; { let t = e.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 2 }); return t } }, printAsPDF() { this.$el.closest("body").classList.add("savings-cal-print-mode"), window.print() }, validateNumberInput(e, t, a) { let r = e.target, s = r.value.trim(); s = s.replace(/[^\d.]/g, "").replace(/^(\d*\.\d*|\d*)/, "$1"); let l = s.split("."); if ((s = l[0].slice(0, t) + (2 === l.length ? "." + l[1].slice(0, 2) : "")).startsWith("0") && "0" !== s && (s = s.slice(1)), a) { let i = !isNaN(parseFloat(s)); i && (s = parseInt(s, 10).toLocaleString("en-US", { minimumFractionDigits: 0, maximumFractionDigits: 0 })) } r.value = s }, validateInputFields(e) { let t = e.target, a = t.value, r; "" === a ? (r = `<div class="error">${this.errorMessageRequired}</div>`, t.closest(".form-group").classList.add("err"), t.closest(".savings-cal-form-item").querySelector(".error") && t.closest(".savings-cal-form-item").querySelector(".error").remove(), t.closest(".savings-cal-form-item").insertAdjacentHTML("beforeend", r)) : (t.closest(".form-group").classList.remove("err"), t.closest(".savings-cal-form-item").querySelector(".error") && t.closest(".savings-cal-form-item").querySelector(".error").remove(), t.closest(".savings-cal-form").querySelector(".error") && t.closest(".savings-cal-form").querySelector(".error").remove(), t.classList.contains("savings-cal-goal-input") ? this.formData.GoalAmount = a : t.classList.contains("savings-cal-goalInterest-input") ? this.formData.GoalInterest = a : t.classList.contains("savings-cal-saved-input") ? this.formData.SavedAmount = a : t.classList.contains("savings-cal-savedInterest-input") && (this.formData.SavedInterest = a)), t.classList.contains("savings-cal-interest-input") && !t.classList.contains("savings-cal-savedInterest-input") && a <= this.inflation && "" !== a && (r = `<div class="error small-error small">${this.errorMessageMinInterestRate}</div>`, t.closest(".savings-cal-form-item").querySelector(".error") && t.closest(".savings-cal-form-item").querySelector(".error").remove(), t.closest(".savings-cal-form-item").insertAdjacentHTML("beforeend", r)), t.classList.contains("savings-cal-saved-input") && parseInt(a.replace(/,/g, "")) >= parseInt(t.closest(".savings-cal-row").querySelector(".savings-cal-goal-input").value.replace(/,/g, "")) && "" !== a && (r = `<div class="error small-error small blue-error">${this.goalAmountValidationMessage}</div>`, t.closest(".form-group").classList.add("err"), t.closest(".savings-cal-form").querySelector(".error") && t.closest(".savings-cal-form").querySelector(".error").remove(), t.closest(".savings-cal-form").insertAdjacentHTML("beforeend", r), document.querySelector(".calculate-savings-btn").setAttribute("disabled", "")), this.updateCalculatedState(e) }, validateEmpty(e) { let t = e.target; "" === t.value.trim() && (t.value = "0") }, validateDifferences(e) { let t = e.target, a = t.value.trim(); if (t.classList.contains("savings-cal-goal-input") && parseInt(a.replace(/,/g, "")) >= parseInt(t.closest(".savings-cal-row").querySelector(".savings-cal-saved-input").value.replace(/,/g, "")) && "" !== a) { if (t.closest(".savings-cal-col").querySelector(".blue-error") && t.closest(".savings-cal-col").querySelector(".blue-error").remove(), t.closest(".savings-cal-col").querySelector(".err")) { let r = t.closest(".savings-cal-col").querySelector(".savings-cal-saved-input"); r.closest(".err").classList.remove("err") } document.querySelector(".calculate-savings-btn").removeAttribute("disabled") } else { errorHtml = `<div class="error small-error small blue-error">${this.goalAmountValidationMessage}</div>`; let s = t.closest(".savings-cal-col").querySelector(".savings-cal-saved-input"); s.closest(".form-group").classList.add("err"), s.closest(".savings-cal-form").querySelector(".error") && s.closest(".savings-cal-form").querySelector(".error").remove(), s.closest(".savings-cal-form").insertAdjacentHTML("beforeend", errorHtml), document.querySelector(".calculate-savings-btn").setAttribute("disabled", "") } }, validationForm() { let e = this.$el.querySelectorAll(".savings-cal-form"); e.forEach(e => { let t = e.querySelectorAll(".savings-cal-goal-input"); t.forEach(e => { e.addEventListener("input", e => { this.validateNumberInput(e, 8, !0), this.validateInputFields(e), this.autoValidate(e), this.validateDifferences(e), this.updateBtnAndShowNotice(e) }) }); let a = e.querySelectorAll(".savings-cal-savedInterest-input"); a.forEach(e => { e.addEventListener("input", e => { this.validateEmpty(e) }) }); let r = e.querySelectorAll(".savings-cal-interest-input"); r.forEach(e => { e.addEventListener("input", e => { this.validateNumberInput(e, 2, !1), this.validateInputFields(e), this.autoValidate(e), this.updateBtnAndShowNotice(e) }) }); let s = e.querySelectorAll(".savings-cal-saved-input"); s.forEach(e => { e.addEventListener("input", e => { this.validateNumberInput(e, 7, !0), this.validateEmpty(e), this.validateInputFields(e), this.autoValidate(e), this.updateBtnAndShowNotice(e) }) }) }) }, autoValidate(e) { let t = e.currentTarget, a = t.closest(".savings-cal-row"), r, s, l, i, n, o, c, _, u, d; if (this.formData.SavingType = t.closest(".savings-cal-col").querySelector(".savings-cal-question-option-btn.active").getAttribute("data-value"), "how_much_can_save" === this.formData.SavingType) r = a.querySelector(".savings-cal-goal-input"), l = a.querySelector(".savings-cal-goalInterest-input"), goalYear = a.querySelectorAll(".savings-cal-years-dropdown vsOpt"), goalFreq = a.querySelectorAll(".savings-cal-freq-dropdown vsOpt"), allInputs = a.querySelectorAll("input"), allSelects = a.querySelectorAll("select"), allInputs.forEach(t => { "" === t.value ? (e.preventDefault(), inputFilled = !1) : inputFilled = !0 }), allSelects.forEach(t => { n = t.closest(".savings-cal-years-dropdown"), o = t.closest(".savings-cal-freq-dropdown"), n ? ((c = n.querySelectorAll(".vsOpt")).forEach(e => { e.classList.contains("active") && (this.formData.GoalYears = e.getAttribute("data-value"), u = !0) }), u ? u = !0 : (e.preventDefault(), u = !1)) : o && ((_ = o.querySelectorAll(".vsOpt")).forEach(e => { e.classList.contains("active") && (this.formData.GoalFrequency = e.getAttribute("data-value"), d = !0) }), d ? d = !0 : (e.preventDefault(), d = !1)) }), d && u && inputFilled && this.updateCalculatedState(e, d && u && inputFilled); else if ("reach_goal" === this.formData.SavingType) { r = a.querySelector(".savings-cal-goal-input"), s = a.querySelector(".savings-cal-saved-input"), l = a.querySelector(".savings-cal-goalInterest-input"), i = a.querySelector(".savings-cal-savedInterest-input"), goalYear = a.querySelector(".savings-cal-years-dropdown select"), goalFreq = a.querySelector(".savings-cal-freq-dropdown select"), allInputs = a.querySelectorAll("input"), allSelects = a.querySelectorAll("select"), inputFilled = !0, allInputs.forEach(t => { "" === t.value && (e.preventDefault(), inputFilled = !1) }), allSelects.forEach(t => { n = t.closest(".savings-cal-years-dropdown"), o = t.closest(".savings-cal-freq-dropdown"), n ? ((c = n.querySelectorAll(".vsOpt")).forEach(e => { e.classList.contains("active") && (this.formData.GoalYears = e.getAttribute("data-value"), u = !0) }), u ? u = !0 : (e.preventDefault(), u = !1)) : o && ((_ = o.querySelectorAll(".vsOpt")).forEach(e => { e.classList.contains("active") && (this.formData.GoalFrequency = e.getAttribute("data-value"), d = !0) }), d ? d = !0 : (e.preventDefault(), d = !1)) }), "" !== r.value && "" !== l.value && u && d ? t.closest("form").querySelector(".savings-cal-section-current").style.display = "block" : t.closest("form").querySelector(".savings-cal-section-current").style.display = "none", this.$el.querySelectorAll(".form-group.err"); let v = a.querySelector(".blue-error"); d && u && inputFilled && !v && this.updateCalculatedState(e, d && u && inputFilled) } }, submitFormValidate(e) { let t = e.currentTarget, a = t.closest(".savings-cal-row"), r = t.closest(".savings-cal-wrapper"), s, l, i, n, o, c, _, u, d, v; if (this.formData.SavingType = t.closest(".savings-cal-col").querySelector(".savings-cal-question-option-btn.active").getAttribute("data-value"), a.querySelector(".savings-cal-goal-input") && (s = a.querySelector(".savings-cal-goal-input")), a.querySelector(".savings-cal-saved-input") && (l = a.querySelector(".savings-cal-saved-input")), a.querySelector(".savings-cal-goalInterest-input") && (i = a.querySelector(".savings-cal-goalInterest-input")), a.querySelector(".savings-cal-savedInterest-input") && (n = a.querySelector(".savings-cal-savedInterest-input")), a.querySelector(".savings-cal-years-dropdown select") && (o = a.querySelector(".savings-cal-years-dropdown select")), a.querySelector(".savings-cal-freq-dropdown select") && (c = a.querySelector(".savings-cal-freq-dropdown select")), allInputs = a.querySelectorAll("input"), allSelects = a.querySelectorAll("select"), "how_much_can_save" === this.formData.SavingType ? (allInputs.forEach(t => { "" === t.value ? (e.preventDefault(), t.closest(".form-group").classList.add("err"), errorHtml = `<div class="error">${this.errorMessageRequired}</div>`, t.closest(".savings-cal-form-item").querySelector(".error") && t.closest(".savings-cal-form-item").querySelector(".error").remove(), t.closest(".savings-cal-form-item").insertAdjacentHTML("beforeend", errorHtml), inputFilled = !1) : (this.formData.GoalAmount = s.value, this.formData.GoalInterest = i.value, this.formData.SavedAmount = "", this.formData.SavedInterest = "", inputFilled = !0) }), allSelects.forEach(t => { o = t.closest(".savings-cal-years-dropdown"), c = t.closest(".savings-cal-freq-dropdown"), o ? ((_ = o.querySelectorAll(".vsOpt")).forEach(e => { e.classList.contains("active") && (this.formData.GoalYears = e.getAttribute("data-value"), d = !0) }), d ? (t.closest(".savings-cal-form-item").querySelector(".errorSelect") && t.closest(".savings-cal-form-item").querySelector(".errorSelect").remove(), d = !0) : (e.preventDefault(), o.classList.add("err"), errorHtml = `<div class="errorSelect">${this.errorMessageRequired}</div>`, t.closest(".savings-cal-form-item").querySelector(".errorSelect") && t.closest(".savings-cal-form-item").querySelector(".errorSelect").remove(), t.closest(".savings-cal-form-item").insertAdjacentHTML("beforeend", errorHtml), d = !1)) : c && ((u = c.querySelectorAll(".vsOpt")).forEach(e => { e.classList.contains("active") && (this.formData.GoalFrequency = e.getAttribute("data-value"), v = !0) }), v ? (t.closest(".savings-cal-form-item").querySelector(".errorSelect") && t.closest(".savings-cal-form-item").querySelector(".errorSelect").remove(), v = !0) : (e.preventDefault(), c.classList.add("err"), errorHtml = `<div class="errorSelect">${this.errorMessageRequired}</div>`, t.closest(".savings-cal-form-item").querySelector(".errorSelect") && t.closest(".savings-cal-form-item").querySelector(".errorSelect").remove(), t.closest(".savings-cal-form-item").insertAdjacentHTML("beforeend", errorHtml), v = !1)) })) : (allInputs.forEach(t => { "" === t.value ? (e.preventDefault(), t.closest(".form-group").classList.add("err"), errorHtml = `<div class="error">${this.errorMessageRequired}</div>`, t.closest(".savings-cal-form-item").querySelector(".error") && t.closest(".savings-cal-form-item").querySelector(".error").remove(), t.closest(".savings-cal-form-item").insertAdjacentHTML("beforeend", errorHtml), inputFilled = !1) : (this.formData.GoalAmount = s.value, this.formData.GoalInterest = i.value, this.formData.SavedAmount = l.value, this.formData.SavedInterest = n.value, inputFilled = !0), parseInt(t.closest(".savings-cal-row").querySelector(".savings-cal-saved-input").value.replace(/,/g, "")) >= parseInt(t.closest(".savings-cal-row").querySelector(".savings-cal-goal-input").value.replace(/,/g, "")) ? (errorHtml = `<div class="error small-error small">${this.goalAmountValidationMessage}</div>`, this.$el.querySelector(".savings-cal-saved-input").closest(".form-group").classList.add("err"), this.$el.querySelector(".savings-cal-saved-input").closest(".savings-cal-form-item").querySelector(".error") && this.$el.querySelector(".savings-cal-saved-input").closest(".savings-cal-form-item").querySelector(".error").remove(), this.$el.querySelector(".savings-cal-saved-input").closest(".savings-cal-form-item").insertAdjacentHTML("beforeend", errorHtml), inputFilled = !1) : (this.formData.GoalAmount = s.value, this.formData.GoalInterest = i.value, this.formData.SavedAmount = l.value, this.formData.SavedInterest = n.value, inputFilled = !0) }), allSelects.forEach(t => { o = t.closest(".savings-cal-years-dropdown"), c = t.closest(".savings-cal-freq-dropdown"), o ? ((_ = o.querySelectorAll(".vsOpt")).forEach(e => { e.classList.contains("active") && (this.formData.GoalYears = e.getAttribute("data-value"), d = !0) }), d ? (t.closest(".savings-cal-form-item").querySelector(".errorSelect") && t.closest(".savings-cal-form-item").querySelector(".errorSelect").remove(), d = !0) : (e.preventDefault(), o.classList.add("err"), errorHtml = `<div class="errorSelect">${this.errorMessageRequired}</div>`, t.closest(".savings-cal-form-item").querySelector(".errorSelect") && t.closest(".savings-cal-form-item").querySelector(".errorSelect").remove(), t.closest(".savings-cal-form-item").insertAdjacentHTML("beforeend", errorHtml), d = !1)) : c && ((u = c.querySelectorAll(".vsOpt")).forEach(e => { e.classList.contains("active") && (this.formData.GoalFrequency = e.getAttribute("data-value"), v = !0) }), v ? (t.closest(".savings-cal-form-item").querySelector(".errorSelect") && t.closest(".savings-cal-form-item").querySelector(".errorSelect").remove(), v = !0) : (e.preventDefault(), c.classList.add("err"), errorHtml = `<div class="errorSelect">${this.errorMessageRequired}</div>`, t.closest(".savings-cal-form-item").querySelector(".errorSelect") && t.closest(".savings-cal-form-item").querySelector(".errorSelect").remove(), t.closest(".savings-cal-form-item").insertAdjacentHTML("beforeend", errorHtml), v = !1)) })), this.$el.querySelectorAll(".form-group.err"), v && d && inputFilled) { this.sendData(), this.scrollToElement(".result-col"), r.classList.contains("calculated") || r.classList.add("calculated"), this.updateCalculatedState(e, v && d && inputFilled), this.$el.querySelector(".savings-cal-accordion-item").classList.contains("active-accordion") && this.$el.querySelector(".savings-cal-accordion-item").classList.remove("active-accordion"), this.$el.querySelector(".savings-cal-accordion-content").classList.contains("active-accordion") && (this.$el.querySelector(".savings-cal-accordion-content").classList.remove("active-accordion"), this.$el.querySelector(".savings-cal-accordion-content").removeAttribute("style")); this.$el.querySelectorAll(".calculate-savings-btn").forEach(e => { e.setAttribute("disabled", "") }), setTimeout(() => { this.$el.querySelector(".savings-cal-pending-overlay").classList.add("hide") }, 1600), this.$el.querySelector(".savings-cal-animate").classList.remove("hide"), this.$el.querySelector(".savings-cal-non-animate").classList.add("hide") } else this.$el.querySelector(".savings-cal-pending-overlay").classList.remove("hide") }, updateOptionValue(e) { let t = e.currentTarget, a = t.getAttribute("data-value"); this.formData.SavingType = a }, updateBtnAndShowNotice(e) { let t = e.currentTarget, a = t.closest(".savings-cal-wrapper"); a.querySelectorAll("form").forEach(e => { a.classList.contains("calculated") && (this.$el.querySelector(".savings-cal-notice").classList.add("show"), e.querySelector(".calculate-savings-btn").textContent = this.recalculateText) }) }, updateToggleQuestion(e) { let t = document.querySelector(".savings-cal-row.active"), a = !0; setTimeout(() => { t.querySelectorAll("input").forEach(e => { "" === e.value.trim() && (a = !1) }), a && t.querySelector(".calculate-savings-btn").removeAttribute("disabled") }, 50) }, updateCalculatedState(e, t) { let a = e.currentTarget, r = a.closest(".savings-cal-wrapper"), s = r.querySelectorAll("form"); t ? s.forEach(e => { e.querySelector(".calculate-savings-btn").removeAttribute("disabled") }) : s.forEach(e => { e.querySelector(".calculate-savings-btn").setAttribute("disabled", "") }), r.classList.contains("calculated") && this.$el.querySelector(".savings-cal-notice").classList.remove("show") }, scrollToElement(e) { let t = document.querySelector(e); if (t) { let a = t.getBoundingClientRect(), r = window.scrollY || document.documentElement.scrollTop, s = a.top + r - 54; window.scrollTo({ top: s, behavior: "smooth" }) } else console.error("Element with ID " + e + " not found.") }, initEventListener() { let e = this.$el.querySelectorAll(".calculate-savings-btn"); e.forEach(e => { e.addEventListener("click", e => { e.preventDefault(), this.calculateData(e) }) }); let t = this.$el.querySelectorAll(".savings-cal-question-option-btn"); t.forEach(e => { e.addEventListener("click", e => { let a = e.currentTarget, r = a.getAttribute("id"); a.classList.add("active"), this.$el.querySelector(".savings-cal-assum-and-notes").classList.add("active"), t.forEach(e => { e !== a && e.classList.remove("active") }); let s = this.$el.querySelectorAll(".savings-cal-row"); s.forEach(e => { e.hasAttribute("data-for") && (e.classList.remove("active"), e.getAttribute("data-for") === r && e.classList.add("active")) }), this.updateBtnAndShowNotice(e), this.updateToggleQuestion(e) }) }); let a = this.$el.querySelectorAll(".savings-cal-accordion-item"); a.forEach(e => { e.addEventListener("click", e => { this.toggleAccordion(e.currentTarget) }) }); let r = this.$el.querySelector(".savings-cal-save-as-linktxt"); r.addEventListener("click", this.printAsPDF); let s = this.$el.querySelector(".savings-cal-assum-and-notes-link"); s.addEventListener("click", () => { $("#savings-calculator-assum-and-notes").modal("toggle") }); this.$el.querySelectorAll(".inc-select").forEach(e => { let t = e.querySelectorAll(".vsOpt"); for (let a = 0; a < t.length; a++)t[a].addEventListener("click", r => { for (let s = 0; s < t.length; s++)t[s].classList.remove("active"); t[a].classList.add("active"); let l = t[a].getAttribute("data-value"); e.querySelector("select").value = l, e.querySelector(".dropdown-toggle span").innerHTML = t[a].innerHTML, e.classList.contains("savings-cal-years-dropdown") ? this.formData.GoalYears = l : e.classList.contains("savings-cal-freq-dropdown") && (this.formData.GoalFrequency = l), t[a].closest(".form-group").classList.remove("err"), t[a].closest(".savings-cal-form-item").querySelector(".errorSelect") && t[a].closest(".savings-cal-form-item").querySelector(".errorSelect").remove(), this.updateBtnAndShowNotice(r), this.autoValidate(r) }) }) }, initLogos() {
            this.$el.querySelectorAll(".savings-cal-tooltiptext-logo").length > 0 && this.$el.querySelectorAll(".savings-cal-tooltiptext-logo").forEach(e => {
                e.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" viewBox="0 0 24 25" fill="none">
          <g>
          <path d="M12.4408 8.13637C13.0203 8.13637 13.49 7.40375 13.49 6.50001C13.49 5.59627 13.0203 4.86365 12.4408 4.86365C11.8613 4.86365 11.3916 5.59627 11.3916 6.50001C11.3916 7.40375 11.8613 8.13637 12.4408 8.13637Z" fill="#FF7600"/>
          <path d="M10.3424 18.5001H15.0638V17.8019L13.49 17.2564V10.3182H10.3424V11.0164L11.9162 11.5619V17.2564L10.3424 17.8019V18.5001Z" fill="#FF7600"/>
          <path d="M11.9162 24.5C5.55281 24.5 0.375 19.1164 0.375 12.5C0.375 5.88364 5.55281 0.5 11.9162 0.5C18.2796 0.5 23.4574 5.88364 23.4574 12.5C23.4574 19.1164 18.2796 24.5 11.9162 24.5ZM11.9162 1.59091C6.12987 1.59091 1.4242 6.48364 1.4242 12.5C1.4242 18.5164 6.12987 23.4091 11.9162 23.4091C17.7026 23.4091 22.4082 18.5164 22.4082 12.5C22.4082 6.48364 17.7026 1.59091 11.9162 1.59091Z" fill="#6F6F6F"/>
          <path d="M15.5884 19.5909H8.76855V17.0164L10.3424 16.4709V12.3473L8.76855 11.8018V9.22729H14.0146V16.4709L15.5884 17.0164V19.5909ZM9.81776 18.5H14.5392V17.8018L12.9654 17.2564V10.3182H9.81776V11.0164L11.3916 11.5618V17.2564L9.81776 17.8018V18.5Z" fill="#6F6F6F"/>
          <path d="M11.9162 8.68187C10.7568 8.68187 9.81775 7.70551 9.81775 6.50006C9.81775 5.2946 10.7568 4.31824 11.9162 4.31824C13.0755 4.31824 14.0146 5.2946 14.0146 6.50006C14.0146 7.70551 13.0755 8.68187 11.9162 8.68187ZM11.9162 5.40915C11.3391 5.40915 10.867 5.90006 10.867 6.50006C10.867 7.10006 11.3391 7.59096 11.9162 7.59096C12.4932 7.59096 12.9654 7.10006 12.9654 6.50006C12.9654 5.90006 12.4932 5.40915 11.9162 5.40915Z" fill="#6F6F6F"/>
          </g>
          <defs>
          <clipPath id="clip0_1191_112278">
          <rect width="23.0824" height="24" fill="white" transform="translate(0.375 0.5)"/>
          </clipPath>
          </defs>
          </svg>`}), this.$el.querySelectorAll(".savings-cal-rotate-logo").length > 0 && this.$el.querySelectorAll(".savings-cal-rotate-logo").forEach(e => {
                    e.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="27" height="28" viewBox="0 0 27 28" fill="none">
          <g>
            <path d="M7.83535 26.146L1.11246 19.5179C0.394967 18.8105 0.394967 17.6529 1.11246 16.9452L16.6334 1.64327C17.3509 0.935885 18.525 0.935885 19.2428 1.64327L25.9657 8.27143C26.6832 8.97882 26.6832 10.1364 25.9657 10.8441L10.4448 26.146C9.72727 26.8534 8.55313 26.8534 7.83535 26.146Z" fill="white"/>
            <path d="M14.7686 2.89638L14.7599 2.88783C14.7038 2.83251 14.7038 2.74258 14.7599 2.68727L15.3439 2.11147C15.4 2.05615 15.4912 2.05615 15.5473 2.11147L15.556 2.12002C15.6091 2.17235 15.6091 2.25711 15.556 2.30944L14.9607 2.89638C14.9076 2.94871 14.8216 2.94871 14.7686 2.89638Z" fill="#272322"/>
            <path d="M12.7253 4.9101L12.7166 4.90154C12.6605 4.84622 12.6606 4.75629 12.7167 4.70098L13.9227 3.51238C13.9788 3.45707 14.07 3.45709 14.1261 3.51241L14.1348 3.52097C14.1878 3.57331 14.1878 3.65806 14.1347 3.71038L12.9174 4.91013C12.8643 4.96245 12.7784 4.96243 12.7253 4.9101Z" fill="#272322"/>
            <path d="M10.9548 6.65584L10.9462 6.64729C10.8901 6.59197 10.8901 6.50204 10.9462 6.44673L12.1522 5.25772C12.2083 5.2024 12.2995 5.2024 12.3556 5.25772L12.3643 5.26627C12.4173 5.3186 12.4173 5.40336 12.3643 5.45569L11.1472 6.65564C11.0941 6.70797 11.0081 6.70797 10.955 6.65564L10.9548 6.65584Z" fill="#272322"/>
            <path d="M23.6489 13.7383L23.6612 13.7505C23.7405 13.8287 23.7403 13.9554 23.6612 14.0334L21.7145 15.9526C21.6352 16.0308 21.5067 16.0306 21.4276 15.9526L21.4153 15.9405C21.3392 15.8655 21.339 15.7435 21.4153 15.6683L23.373 13.7381C23.4491 13.6631 23.5728 13.6629 23.6491 13.7381L23.6489 13.7383Z" fill="#272322"/>
            <path d="M26.379 8.25004L19.2719 1.24314C18.4911 0.473291 17.2761 0.422643 16.5586 1.13003L0.506303 16.9559C-0.211193 17.6633 -0.159821 18.8611 0.621034 19.631L7.72807 26.6379C8.50892 27.4077 9.72387 27.4584 10.4414 26.751L26.4937 10.9251C27.2112 10.2177 27.1598 9.01989 26.379 8.25004ZM9.94591 26.236C9.47044 26.7048 8.66561 26.6713 8.14818 26.1612L1.09794 19.2103C0.580507 18.7002 0.546544 17.9067 1.02202 17.4379L16.9916 1.69307C17.4671 1.22429 18.2719 1.25777 18.7893 1.76791L25.8396 8.71881C26.357 9.22895 26.391 10.0224 25.9155 10.4912L9.94591 26.236Z" fill="#272322"/>
            <path d="M25.7362 14.973L25.7237 14.975C25.4822 15.013 25.3107 15.2249 25.3227 15.4657C25.3997 17.0161 25.0981 18.5606 24.4362 19.979C23.6517 21.66 22.4019 23.0748 20.8219 24.0706C19.8196 24.7023 18.7234 25.1435 17.5632 25.3818L16.8794 25.5222L16.6973 24.0703C16.6799 23.9313 16.5084 23.8719 16.4065 23.9695L14.2275 26.0602C14.1056 26.177 14.1301 26.3762 14.2768 26.4609L16.8977 27.9752C17.0252 28.049 17.1831 27.9465 17.1648 27.8019L16.9964 26.4597L17.588 26.3486C18.9266 26.097 20.1898 25.6013 21.3425 24.8745C23.0863 23.7754 24.4633 22.2132 25.3244 20.3569C26.0456 18.8023 26.3732 17.1109 26.2879 15.4131C26.2739 15.1337 26.0156 14.9286 25.7354 14.9727L25.7362 14.973Z" fill="#272322"/>
            <path d="M1.16214 13.0608C1.16613 13.0602 1.17013 13.0594 1.17412 13.0588C1.41443 13.0208 1.58767 12.8109 1.57568 12.5714C1.49805 11.0199 1.79972 9.47403 2.46213 8.05476C3.2467 6.3738 4.49647 4.95903 6.07644 3.96323C7.07877 3.33153 8.17499 2.89033 9.33514 2.652L9.87055 2.54198C9.95047 2.52566 10.0275 2.57997 10.0375 2.6596L10.209 4.02766C10.2233 4.14049 10.362 4.18861 10.4448 4.10926L12.7816 1.86724C12.8476 1.80393 12.8344 1.69588 12.7548 1.65001L9.93249 0.0191397C9.83288 -0.0385429 9.7093 0.04165 9.72357 0.154483L9.88539 1.44601C9.89453 1.51804 9.84515 1.58445 9.77323 1.59796L9.30974 1.6849C7.97122 1.93645 6.70803 2.43224 5.5553 3.15905C3.81151 4.25811 2.43445 5.82033 1.5734 7.67658C0.852192 9.23092 0.524553 10.922 0.609602 12.6198C0.623587 12.8995 0.881589 13.1052 1.16214 13.0608Z" fill="#272322"/>
          </g>
          <defs>
            <clipPath id="clip0_1191_132280">
              <rect width="27" height="28" fill="white"/>
            </clipPath>
          </defs>
        </svg>`})
        }, handleOrientationChange() { setTimeout(() => { this.myChart && (this.myChart.destroy(), this.renderChart()) }, 100) }
    }, mounted() { this.fetchPageLoadData(), this.pageLoadDummyData(), this.renderTooltips(), this.initLogos(), this.validationForm(), this.initEventListener(), window.addEventListener("orientationchange", this.handleOrientationChange) }, beforeUnmount() { window.removeEventListener("orientationchange", this.handleOrientationChange) }, beforeDestroy() { this.myChart && this.myChart.destroy() }
}); savingsCalculator.mount("#savings-cal");